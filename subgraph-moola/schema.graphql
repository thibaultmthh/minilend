enum InterestRateMode {
  NONE
  STABLE
  VARIABLE
}

enum UserStatus {
  ACTIVE
  LIQUIDATED
  INACTIVE
}

interface Event {
  id: ID!
  timestamp: BigInt!
  txHash: Bytes!
  blockNumber: BigInt!
  emitter: Bytes!
}

type LendingPool @entity {
  id: ID!
  paused: Boolean!
  totalValueLockedETH: BigInt!
  totalBorrowsETH: BigInt!
  reserves: [Reserve!]! @derivedFrom(field: "pool")
  lastUpdateTimestamp: BigInt!
  # Aggregations
  dailyStats: [DailyPoolStat!]! @derivedFrom(field: "pool")
  # Full text search fields
  searchText: String! # Combination of relevant fields for searching
}

type DailyPoolStat @entity {
  id: ID! # timestamp rounded to day + pool address
  pool: LendingPool!
  timestamp: BigInt!
  totalValueLockedETH: BigInt!
  totalBorrowsETH: BigInt!
  dailyVolume: BigInt!
  uniqueUsers: Int!
  txCount: Int!
}

type Reserve @entity(immutable: false) {
  "Asset address"
  id: ID!
  pool: LendingPool!
  symbol: String!
  name: String!
  decimals: Int!
  aTokenAddress: Bytes!
  stableDebtTokenAddress: Bytes!
  variableDebtTokenAddress: Bytes!
  
  liquidityRate: BigInt!
  variableBorrowRate: BigInt!
  stableBorrowRate: BigInt!
  
  totalDeposits: BigInt!
  totalStableBorrows: BigInt!
  totalVariableBorrows: BigInt!
  utilizationRate: BigInt!
  liquidityIndex: BigInt!
  variableBorrowIndex: BigInt!
  
  isActive: Boolean!
  isFrozen: Boolean!
  borrowingEnabled: Boolean!
  stableBorrowRateEnabled: Boolean!
  
  userReserves: [UserReserve!]! @derivedFrom(field: "reserve")
  lastUpdateTimestamp: BigInt!
  
  # Aggregations
  dailyStats: [DailyReserveStat!]! @derivedFrom(field: "reserve")
  # Full text search
  searchText: String!
}

type DailyReserveStat @entity {
  id: ID!
  reserve: Reserve!
  timestamp: BigInt!
  utilizationRate: BigInt!
  totalDeposits: BigInt!
  totalBorrows: BigInt!
  depositAPY: BigInt!
  borrowAPY: BigInt!
}

type UserReserve @entity(immutable: false) {
  id: ID!
  user: User!
  reserve: Reserve!
  
  scaledATokenBalance: BigInt!
  currentATokenBalance: BigInt!
  usageAsCollateralEnabled: Boolean!
  
  scaledVariableDebt: BigInt!
  currentVariableDebt: BigInt!
  
  principalStableDebt: BigInt!
  currentStableDebt: BigInt!
  stableBorrowRate: BigInt!
  stableBorrowLastUpdateTimestamp: BigInt!
  
  interestRateMode: InterestRateMode!
  lastUpdateTimestamp: BigInt!
}

type User @entity {
  id: ID!
  userReserves: [UserReserve!]! @derivedFrom(field: "user")
  status: UserStatus!
  
  totalCollateralETH: BigInt!
  totalBorrowsETH: BigInt!
  availableBorrowsETH: BigInt!
  currentLiquidationThreshold: BigInt!
  ltv: BigInt!
  healthFactor: BigInt!
  
  borrowedReservesCount: Int!
  lastUpdateTimestamp: BigInt!
  
  # Full text search
  searchText: String!
}

type LiquidationCall implements Event @entity(immutable: true) {
  id: ID!
  timestamp: BigInt!
  txHash: Bytes!
  blockNumber: BigInt!
  emitter: Bytes!
  
  user: User!
  collateralReserve: Reserve!
  debtReserve: Reserve!
  collateralAmount: BigInt!
  debtToCover: BigInt!
  liquidator: Bytes!
  receiveAToken: Boolean!
}

type BorrowEvent implements Event @entity(immutable: true) {
  id: ID!
  timestamp: BigInt!
  txHash: Bytes!
  blockNumber: BigInt!
  emitter: Bytes!
  
  user: User!
  reserve: Reserve!
  amount: BigInt!
  interestRateMode: InterestRateMode!
  borrowRate: BigInt!
}

type DepositEvent implements Event @entity(immutable: true) {
  id: ID!
  timestamp: BigInt!
  txHash: Bytes!
  blockNumber: BigInt!
  emitter: Bytes!
  
  user: User!
  reserve: Reserve!
  amount: BigInt!
}