# Base Event interface
interface Event {
  id: ID!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: String!
  user: User!
  wave: Wave
}

type DepositEvent implements Event @entity {
  id: ID!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: String!
  user: User!
  wave: Wave
  amount: BigInt!
  from: String!
  to: String!
}

type WithdrawEvent implements Event @entity {
  id: ID!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: String!
  user: User!
  wave: Wave
  amount: BigInt!
  from: String!
  to: String!
}

type RewardEvent implements Event @entity {
  id: ID!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: String!
  user: User!
  wave: Wave
  amount: BigInt!
  odds: String!
}

type ReferralEvent implements Event @entity {
  id: ID!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: String!
  user: User!
  wave: Wave
  referredUser: User!
}

type WaveStartEvent implements Event @entity {
  id: ID!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: String!
  user: User!
  wave: Wave
  totalStake: BigInt!
}

type WaveEndEvent implements Event @entity {
  id: ID!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: String!
  user: User!
  wave: Wave
  totalRewards: BigInt!
  totalParticipants: Int!
}

type ProtocolMetrics @entity {
  id: ID!
  totalStaked: BigInt!
  totalRewardsGiven: BigInt!
  totalUsers: Int!
}

type User @entity {
  id: ID!
  totalStake: BigInt!
  totalReward: BigInt!
  stakes: [Stake!] @derivedFrom(field: "user")
  withdraws: [Withdraw!] @derivedFrom(field: "user")
  winners: [Winner!] @derivedFrom(field: "user")
  referredUsers: [User!] @derivedFrom(field: "referrer")
  referrer: User
  createdAt: BigInt!
  lastActionAt: BigInt!
  depositEvents: [DepositEvent!] @derivedFrom(field: "user")
  withdrawEvents: [WithdrawEvent!] @derivedFrom(field: "user")
  rewardEvents: [RewardEvent!] @derivedFrom(field: "user")
  referralEvents: [ReferralEvent!] @derivedFrom(field: "user")
}

type Stake @entity {
  id: ID!
  user: User!
  amount: BigInt!
  wave: Wave!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: String!
}

type Withdraw @entity {
  id: ID!
  user: User!
  amount: BigInt!
  wave: Wave!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: String!
}

type Wave @entity {
  id: ID!
  totalStake: BigInt!
  totalReward: BigInt!
  randomSeed: BigInt
  rewardsDistributed: Boolean!
  stakes: [Stake!]! @derivedFrom(field: "wave")
  withdraws: [Withdraw!]! @derivedFrom(field: "wave")
  winners: [Winner!]! @derivedFrom(field: "wave")
  startedAt: BigInt!
  endedAt: BigInt
  blockNumber: BigInt!
  depositEvents: [DepositEvent!] @derivedFrom(field: "wave")
  withdrawEvents: [WithdrawEvent!] @derivedFrom(field: "wave")
  rewardEvents: [RewardEvent!] @derivedFrom(field: "wave")
  startEvent: WaveStartEvent @derivedFrom(field: "wave")
  endEvent: WaveEndEvent @derivedFrom(field: "wave")
}

type Winner @entity {
  id: ID!
  user: User!
  wave: Wave!
  reward: BigInt!
  odds: String!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: String!
}

type HourData @entity(timeseries: true) {
  id: Int8!
  timestamp: Timestamp!
  blockNumber: BigInt!
  depositAmount: BigInt!
  depositCount: Int!
  uniqueDepositors: [String!]!
  withdrawAmount: BigInt!
  withdrawCount: Int!
  uniqueWithdrawers: [String!]!
}

type DayData @entity(timeseries: true) {
  id: Int8!
  timestamp: Timestamp!
  blockNumber: BigInt!
  depositAmount: BigInt!
  depositCount: Int!
  uniqueDepositors: [String!]!
  withdrawAmount: BigInt!
  withdrawCount: Int!
  uniqueWithdrawers: [String!]!
}

type _Schema_
  @fulltext(
    name: "userSearch"
    language: en
    algorithm: rank
    include: [
      {
        entity: "User"
        fields: [
          { name: "id" }
        ]
      }
    ]
  )